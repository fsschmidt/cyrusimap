.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IMAP 3pm"
.TH IMAP 3pm "2012-12-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cyrus::IMAP \- Interface to Cyrus imclient library
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Cyrus::IMAP;
\&
\&  my $client = Cyrus::IMAP\->new(\*(Aqmailhost\*(Aq[, $flags]);
\&  $flags = Cyrus::IMAP::CONN_NONSYNCLITERAL;
\&
\&  ($server, $mailbox) = Cyrus::IMAP\->fromURL($url);
\&  $url = Cyrus::IMAP\->toURL($server, $mailbox);
\&
\&  $client\->setflags($flags);
\&  $client\->clearflags(Cyrus::IMAP::CONN_INITIALRESPONSE);
\&  $flags = $client\->flags;
\&  $server = $client\->servername;
\&  $client\->authenticate;
\&  $flags = Cyrus::IMAP::CALLBACK_NUMBERED || Cyrus::IMAP::CALLBACK_NOLITERAL;
\&  $client\->addcallback({\-trigger => $str, \-flags => $flags,
\&                        \-callback => \e&cb, \-rock => \e$var}, ...);
\&  $client\->send(\e&callback, \e&cbdata, $format, ...);
\&  $client\->processoneevent;
\&  ($result, $text) = $client\->send(undef, undef, $format, ...);
\&  ($fd, $writepending) = $client\->getselectinfo;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Cyrus::IMAP module provides an interface to the Cyrus \fBimclient\fR
library.  These are primarily useful for implementing \fBcyradm\fR operations
within a Perl script; there are easier ways to implement general client
operations, although they may be more limited in terms of authentication
options when talking to a Cyrus imapd.
.PP
In the normal case, one will attach to a Cyrus server and authenticate
using the best available method:
.PP
.Vb 5
\&        my $client = Cyrus::IMAP::new(\*(Aqimap\*(Aq);
\&        $client\->authenticate;
\&        if (!$client\->send(\*(Aq\*(Aq, \*(Aq\*(Aq, \*(AqCREATE %s\*(Aq, \*(Aquser.\*(Aq . $username)) {
\&          warn "createmailbox user.$username: $@";
\&        }
.Ve
.PP
In simple mode as used above, \f(CW\*(C`send()\*(C'\fR is invoked with \f(CW\*(C`undef\*(C'\fR, \f(CW0\fR, or
\&\f(CW\*(Aq\*(Aq\fR for the callback and rock (callback data) arguments; it returns a list
of \f(CW\*(C`($result, $text)\*(C'\fR from the command.  If invoked in scalar context, it
returns \f(CW$result\fR and places \f(CW$text\fR in \f(CW$@\fR.  In this mode, there is no
need to use \f(CW\*(C`processoneevent()\*(C'\fR.  If more control is desired, use the callback
and rock arguments and invoke \f(CW\*(C`processoneevent()\*(C'\fR regularly to receive
results from the \s-1IMAP\s0 server.  If still more control is needed, the
\&\f(CW\*(C`getselectinfo()\*(C'\fR method returns a list containing a file descriptor (\fInot\fR
Perl filehandle) which can be passed to \fIselect()\fR; if the second element of the
list is true, you should include it in the write mask as well as the read mask
because the \fBimclient\fR library needs to perform queued output.
.PP
For more information, consult the Cyrus documentation.
.SH "NOTES"
.IX Header "NOTES"
\&\f(CW\*(C`send()\*(C'\fR behaves as if the \f(CW\*(C`Cyrus::IMAP::CONN_NONSYNCLITERAL\*(C'\fR flag is always
set.  This is because it is a wrapper for the C version, which cannot be made
directly available from Perl, and synchronous literals require interaction
with the \s-1IMAP\s0 server while parsing the format string.  This is planned to be
fixed in the future.
.PP
The \f(CW\*(AqLOGIN\*(Aq\fR mechanism can be used to authenticate with a plaintext username
and password.  This is intended as a workaround for a bug in early \s-1SASL\s0
implementations; use of Cyrus::IMAP with non-Cyrus servers is not recommended,
primarily because there are easier ways to implement \s-1IMAP\s0 client functionality
in Perl.  (However, if you need \s-1SASL\s0 support, \f(CW\*(C`Cyrus::IMAP\*(C'\fR is currently the
only way to get it.)
.PP
The file descriptor returned by \f(CW\*(C`getselectinfo()\*(C'\fR should not be used for
anything other than \f(CW\*(C`select()\*(C'\fR.  In particular, I/O on the file descriptor
will almost certainly cause more problems than whatever problem you think
you are trying to solve.
.PP
The \fBtoURL\fR and \fBfromURL\fR routines are to ease conversion between URLs and
\&\s-1IMAP\s0 mailbox and server combinations, and are a simple frontend for the
libcyrus functions of the same name.
.PP
The \fBimparse\fR library routines are not implemented, because they are little
more than a (failed) attempt to make parsing as simple in C as it is in Perl.
.PP
This module exists primarily so we can integrate Cyrus administration into
our Perl-based account management system, and secondarily so that we can
rewrite \fBcyradm\fR in a sensible language instead of Tcl.  Usability for other
purposes is not guaranteed.
.SH "AUTHORs"
.IX Header "AUTHORs"
Brandon S. Allbery <allbery@ece.cmu.edu>, Rob Siemborski <rjs3+@andrew.cmu.edu>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cyrus::IMAP::Admin
\&\fIperl\fR\|(1), \fIcyradm\fR\|(1), \fIimclient\fR\|(3), \fIimapd\fR\|(8).
