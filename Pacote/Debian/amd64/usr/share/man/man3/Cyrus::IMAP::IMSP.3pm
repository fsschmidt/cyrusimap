.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IMAP::IMSP 3pm"
.TH IMAP::IMSP 3pm "2012-12-01" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Cyrus::IMAP::IMSP \- Perl module for Cyrus IMSP user options
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Cyrus::IMAP::IMSP;
\&
\&  my $client = Cyrus::IMAP::IMSP\->new(\*(Aqimsphost\*(Aq[, $port[, $flags]]);
\&  $rc = $client\->set(\*(Aqmailreader.window.size\*(Aq, \*(Aq200x300\*(Aq);
\&  %options = $client\->get(\*(Aqmailreader.*\*(Aq)
\&  $rc = $client\->unset(\*(Aqmailreader.window.size\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a Perl interface to the Cyrus \s-1IMSP\s0 functions that
relate to user options (preferences). Only three \s-1IMSP\s0 operations are
implemented: set, unset, and get.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "new($server[, $port[, $flags]])" 4
.el .IP "new($server[, \f(CW$port\fR[, \f(CW$flags\fR]])" 4
.IX Item "new($server[, $port[, $flags]])"
Instantiates a \fBCyrus::IMAP::IMSP\fR object.  This is in fact a Cyrus::IMAP
object with a few additional methods, so all Cyrus::IMAP methods are
available if needed.  (In particular, you will always want to use the
\&\f(CW\*(C`authenticate\*(C'\fR method.)
.IP "error" 4
.IX Item "error"
Return the last error that occurred, or undef if the last operation was
successful.  This is in some cases (such as \f(CW\*(C`get\*(C'\fR) the only way to
distinguish between a successful return of an empty list and an error return.
.Sp
Calling \f(CW\*(C`error\*(C'\fR does not reset the error state, so it is legal to write:
.Sp
.Vb 2
\&    %options = $client\->get($option);
\&    print STDERR "Error: ", $client\->error if $client\->error;
.Ve
.ie n .IP "set($option, $value)" 4
.el .IP "set($option, \f(CW$value\fR)" 4
.IX Item "set($option, $value)"
Sets the option named by \f(CW$option\fR to the value in \f(CW$value\fR.
.Sp
There are no restrictions or quoting rules needed to protect special
characters in the value argument. (The Cyrus::IMAP layer will take care
those details by adding double quotes or a literal introducer.)
.Sp
If successful, returns 1. Otherwise, returns undef and makes an error
message available through the \*(L"error\*(R" function.
.IP "unset($option)" 4
.IX Item "unset($option)"
Removes the option named by \f(CW$option\fR. The option is completely removed
from the user's name space but will revert to a site-wide default if
one has been set. Note that this is different from assigning an option
the null value with set($option, '').
.Sp
If you try to unset an option that does not exist, an error is
returned saying that the option was already unset.
.Sp
If successful, returns 1. Otherwise, returns undef and makes an error
message available through the \*(L"error\*(R" function.
.IP "get($option_pattern)" 4
.IX Item "get($option_pattern)"
Get takes either an option name or a pattern of names to fetch. The
pattern can contain either \*(L"*\*(R" or \*(L"%\*(R" wildcards anywhere in the
string. The usual \s-1IMAP\s0 wildcard semantics apply.
.Sp
The return value is a hash of options with each key being an option
name and each value being the option's value string. If an empty hash
is returned, it's either because there were no matching options or
because some error happened. Check the \*(L"error\*(R" function to see which
was the case.
.Sp
The \s-1IMSP\s0 protocol also returns an access flag of \*(L"[\s-1READ\-WRITE\s0]\*(R" or
\&\*(L"[\s-1READ\-ONLY\s0]\*(R" but that information is discarded by this function. A
more complicated function that returns both the value and the access
flag could be added later if needed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Brandon S. Allbery, allbery@ece.cmu.edu
\&\s-1IMSP\s0 modifications by Joseph Jackson, jackson@CMU.EDU
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Cyrus::IMAP
\&\fIperl\fR\|(1), \fIcyradm\fR\|(1), \fIimapd\fR\|(8).
